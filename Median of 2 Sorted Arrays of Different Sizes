Median of 2 Sorted Arrays of Different Sizes

O(Log(m+N))
solution:
   
   double a=nums1.size(),b=nums2.size(),i,d,j;
        vector<int>v(a+b);
        while(i<a && j<b){
            if(nums1[i]<nums2[j]) v[d++]=nums1[i++];
             else v[d++]=nums2[j++];
        }
        while(i<a) v[d++]=nums1[i++];
        while(j<b) v[d++]=nums2[j++];
        int n=v.size();
        if(n%2==0) return (float)(v[(n/2)-1]+v[n/2])/2;
        else return (float)(v[n/2]);
        
 O(min(log n,log m))
 Solution
      
      double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
    if(nums1.size()>nums2.size()) return findMedianSortedArrays(nums1,nums2);
        int n=nums1.size(),m=nums2.size(),l=0,r=n-1,l1,l2,r1,r2,m1,m2;
        while(l<=r){
            m1=(l+r)/2;
            m2=((n+m)+1)/2-m1;
            l1= (m1==0) ? INT_MIN : nums1[m1-1];
            l2= (m2==0) ? INT_MIN : nums2[m2-1];

            r1= (m1==n) ? INT_MAX : nums1[m1+1];
            r2= (m2==m) ? INT_MAX : nums2[m2+1];

            if(l1<=r2 && l2<=r1){
                if((n+m)%2==0) {
                    return (max(l1,l2) + min(r1,r2))/2.0;
                }
                else return max(l1,l2);
            }
            else if(l1>r2) r=m1-1; 
            else l=m1+1;
        }
        return 0.0;
    }
