QUESTION:
You are given an m x n integer matrix matrix with the following two properties:
Each row is sorted in non-decreasing order.
The first integer of each row is greater than the last integer of the previous row.
Given an integer target, return true if target is in matrix or false otherwise.

You must write a solution in O(log(m * n)) time complexity.

Example 1:
Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 3
Output: true

ANS:
 bool searchMatrix(vector<vector<int>>& matrix, int target) {
        int n=matrix.size();
        int m=matrix[0].size(),l=0,r=(n*m)-1,mid;
//->we do mid/m && mid%m to get position of each element in matrix 
//-> then we do normal binary search .  (EFFICIENT)
                //OR
//we can put all elements in an alternate array then after we can do BS but space will be O(n*m).  (BETTER).

        while(l<=r){
            mid=(l+(r-l)/2);
            if(matrix[mid/m][mid%m]==target) return true;
            else if (matrix[mid/m][mid%m]<target) l=mid+1;
            else r=mid-1;           
        }
        return false;
    }
