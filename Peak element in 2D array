QUESTION:
A peak element in a 2D grid is an element that is strictly greater than all of its adjacent neighbors to the left, right, top, and bottom.
Given a 0-indexed m x n matrix mat where no two adjacent cells are equal, find any peak element mat[i][j] and return the length 2 array [i,j].
You may assume that the entire matrix is surrounded by an outer perimeter with the value -1 in each cell.

You must write an algorithm that runs in O(m log(n)) or O(n log(m)) time.

Example 1:
Input: mat = [[1,4],[3,2]]
Output: [0,1]
Explanation: Both 3 and 4 are peak elements so [1,0] and [0,1] are both acceptable answers

ANS:

vector<int> findPeakGrid(vector<vector<int>>& mat) {
/*logic is same as peak in 1D array only implementation way changed we now have to move acc to pos of matrix and that we find by finding mid && cotinously getting r as row pos in seperate loop and mid as colum indx */
         int n=mat.size(),m=mat[0].size(),l=0,h=m-1,mid,i;
         while(l<=h){
            mid=(l+(h-l)/2);
            int r=0;
            for (i=0;i<n;i++){
                if(mat[r][mid]<mat[i][mid]) r=i; // to get position acc to row
            }
            if((mid ==0 || mat[r][mid-1]<=mat[r][mid]) &&
            (mid ==m-1 || mat[r][mid+1]<=mat[r][mid])) return {r,mid};
            else if(mid>0 && mat[r][mid-1]>=mat[r][mid]){
                h=mid-1;
            }
            else l=mid+1;
         }
         return {-1,-1};
    }
