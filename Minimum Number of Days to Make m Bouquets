Question:
You are given an integer array bloomDay, an integer m and an integer k.
You want to make m bouquets. To make a bouquet, you need to use k adjacent flowers from the garden.
The garden consists of n flowers, the ith flower will bloom in the bloomDay[i] and then can be used in exactly one bouquet.

Return the minimum number of days you need to wait to be able to make m bouquets from the garden. If it is impossible to make m bouquets return -1.

 

Example 1:

Input: bloomDay = [1,10,3,10,2], m = 3, k = 1
Output: 3
Explanation: Let us see what happened in the first three days. x means flower bloomed and _ means flower did not bloom in the garden.
We need 3 bouquets each should contain 1 flower.
After day 1: [x, _, _, _, _]   // we can only make one bouquet.
After day 2: [x, _, _, _, x]   // we can only make two bouquets.
After day 3: [x, _, x, _, x]   // we can make 3 bouquets. The answer is 3.

ANS:
 
    int minDays(vector<int>& bloomDay, int m, int k) {
        int n=bloomDay.size();
        //we're checking that we have enough flowers to make bouqet if not returning -1
        if(1ll*m*k>n) return -1;
        int l=1,r=1e9,mid,c,i,j,ans=-1;
        while(l<=r){
            mid=(l+r)/2;
            c=0,j=0;
            //we're finding using i,j/k like how many bouqets can we make upto mid begining from l to mid then storing them in c.
            for(i=0;i<n;i++){
                if(bloomDay[i]>mid){
                    //if arr[i]>mid here we are assuming that we have enough flowers in c to make m bouqets upto bloomday[i] we calculated how much bouqet we make.
                    c+=(i-j)/k;
                    j=i+1; //here we simply checking for right part that how many we can make after ith day which are possible.
                }
            }
            c+=(i-j)/k;//in this we are finding that bouqets can be made for m last element or not for the last mid b
            if(c>=m){ 
                ans=mid;//simply if we can make c bouqets upto mid than we obivisouly make from after mid days so we skipp right part and we find in left part to get minimum days.
                r=mid-1;
            }
            else l=mid+1;
        }
         return ans;
    }
